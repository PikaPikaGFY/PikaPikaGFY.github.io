<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>FDS（三）：树</title>
    <link href="/2024/03/20/fds-tree/"/>
    <url>/2024/03/20/fds-tree/</url>
    
    <content type="html"><![CDATA[<p>lenth,depth,hight</p><p>表示树的方法：</p><ol><li>一个节点+指向父的指针</li><li>一个节点+指向第一个子指针+指向下一个兄弟指针</li><li>一个节点+指向左子指针+指向右子指针</li></ol><p>任何一颗普通的树，都可以转化为一颗二叉树来讨论</p>]]></content>
    
    
    <categories>
      
      <category>FDS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FDS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/03/15/computational-neuroscience/CN/"/>
    <url>/2024/03/15/computational-neuroscience/CN/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>R</th><th>C</th><th>Vp-p</th><th>V</th><th>V平均</th><th>Vp</th><th>Kf</th><th>Kp</th></tr></thead><tbody><tr><td>750</td><td>470</td><td>0.4</td><td>13.8</td><td>13.8</td><td>14</td><td>1</td><td>1.014493</td></tr><tr><td>3000</td><td>470</td><td>0.6</td><td>15.65</td><td>15.65</td><td>16</td><td>1</td><td>1.022364</td></tr><tr><td>750</td><td>100</td><td>3.6</td><td>13.92</td><td>13.88</td><td>15.8</td><td>1.002882</td><td>1.135057</td></tr><tr><td>3000</td><td>100</td><td>0.6</td><td>16.14</td><td>16.13</td><td>16.4</td><td>1.00062</td><td>1.016109</td></tr></tbody></table><table><thead><tr><th></th><th>输入电压有效值（V）</th><th>输出电压平均值（V）</th><th>输出电压平均值的理论值（V）</th><th>百分偏差</th></tr></thead><tbody><tr><td>半波整流</td><td>12.33</td><td>4.884</td><td>5.549</td><td>11.98</td></tr><tr><td>全波整流</td><td>12.44</td><td>4.891</td><td>5.598</td><td>12.63</td></tr><tr><td>桥式整流</td><td>12.37</td><td>9.627</td><td>11.13</td><td>13.5</td></tr></tbody></table><table><thead><tr><th>R</th><th>C</th><th>Vp-p</th><th>V</th><th>V平均</th><th>Vp</th><th>Kf</th><th>Kp</th></tr></thead><tbody><tr><td>750</td><td>470</td><td>0.45</td><td>7.565</td><td>7.564</td><td>7.796</td><td>1.000132</td><td>1.030535</td></tr><tr><td>3000</td><td>470</td><td>0.6</td><td>7.804</td><td>7.802</td><td>8.2</td><td>1.000256</td><td>1.050743</td></tr><tr><td>750</td><td>100</td><td>1.8</td><td>7.408</td><td>7.401</td><td>7.944</td><td>1.000946</td><td>1.072354</td></tr><tr><td>3000</td><td>100</td><td>0.6</td><td>7.964</td><td>7.6</td><td>8.2</td><td>1.047895</td><td>1.029633</td></tr></tbody></table><table><thead><tr><th>R</th><th>C</th><th>Vp-p</th><th>V</th><th>V平均</th><th>Vp</th><th>Kf</th><th>Kp</th></tr></thead><tbody><tr><td>750</td><td>470</td><td>0.4</td><td>14.01</td><td>14.01</td><td>14.2</td><td>1</td><td>1.013562</td></tr><tr><td>3000</td><td>470</td><td>0.6</td><td>14.76</td><td>14.76</td><td>15</td><td>1</td><td>1.01626</td></tr><tr><td>750</td><td>100</td><td>0.6</td><td>15.1</td><td>15.1</td><td>15.4</td><td>1</td><td>1.019868</td></tr><tr><td>3000</td><td>100</td><td>0.6</td><td>15.1</td><td>15.1</td><td>15.4</td><td>1</td><td>1.019868</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>computational_neuroscience</title>
    <link href="/2024/03/15/computational-neuroscience/"/>
    <url>/2024/03/15/computational-neuroscience/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>R</th><th>C</th><th>Vp-p</th><th>V</th><th>V平均</th><th>Vp</th><th>Kf</th><th>Kp</th></tr></thead><tbody><tr><td>750</td><td>470</td><td>0.4</td><td>13.8</td><td>13.8</td><td>14</td><td>1</td><td>1.014493</td></tr><tr><td>3000</td><td>470</td><td>0.6</td><td>15.65</td><td>15.65</td><td>16</td><td>1</td><td>1.022364</td></tr><tr><td>750</td><td>100</td><td>3.6</td><td>13.92</td><td>13.88</td><td>15.8</td><td>1.002882</td><td>1.135057</td></tr><tr><td>3000</td><td>100</td><td>0.6</td><td>16.14</td><td>16.13</td><td>16.4</td><td>1.00062</td><td>1.016109</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fds-hw</title>
    <link href="/2024/03/06/fds-hw1/"/>
    <url>/2024/03/06/fds-hw1/</url>
    
    <content type="html"><![CDATA[<p>homework history</p><span id="more"></span><h1>Day 1</h1><h2 id="判断题：">判断题：</h2><p>[√] The major task of algorithm analysis is to analyze the time complexity and the space complexity.</p><p>[×]<em>n</em>^0.01^ is <em>O</em>(log<em>n</em>).</p><p>[×]The Fibonacci number sequence {F~N~} is defined as: F~0~=0, F~1~=1, F~N~=F~N−1~+F~N−2~, <em>N</em>=2, 3, … The <strong>space complexity</strong> of the function which calculates <em>F~N~</em> recursively is:is Θ(<em>N</em>!).</p><p>[√]<em>O</em>(<em>N</em> ^2^) is the same as <em>O</em>(1+2+3+⋯+<em>N</em>).</p><h2 id="单选题：">单选题：</h2><p>Given the following four algorithms with their runtimes for problem size 100 and their time complexities:</p><table><thead><tr><th>Algorithm</th><th>Runtime</th><th>Time Complexity</th></tr></thead><tbody><tr><td>A</td><td>100</td><td><em>O</em>(<em>N</em>)</td></tr><tr><td>B</td><td>50</td><td><em>O</em>(<em>N</em>2)</td></tr><tr><td>C</td><td>25</td><td><em>O</em>(<em>N</em>3)</td></tr><tr><td>D</td><td>10</td><td><em>O</em>(<em>N</em>4)</td></tr></tbody></table><p>Which algorithm is the fastest for problem size 200?</p><blockquote><p>D</p></blockquote><p>Let <em>n</em> be a non-negative integer representing the size of input. The time complexity of the following piece of code is:</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span> n <span class="token operator">>=</span> <span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    x <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><blockquote><p>O(n^1/2^)</p></blockquote><p>The recurrent equations for the time complexities of programs P1 and P2 are:</p><ul><li>P1: <em>T</em>(1)=1,<em>T</em>(<em>N</em>)=<em>T</em>(<em>N</em>/3)+1</li><li>P2: <em>T</em>(1)=1,<em>T</em>(<em>N</em>)=3<em>T</em>(<em>N</em>/3)+1</li></ul><p>Then the correct conclusion about their time complexities is:</p><blockquote><p>O(log(n)) for P1 and O(N) for P2</p></blockquote><p>Which of the following pairs of functions has the same speed of growth:</p><blockquote><p>NlogN^2^ and NlogN</p></blockquote><p>To judge an integer <em>N</em> (&gt;10) is prime or not, we need to check if it is divisible by any odd number from 3 to <em>N</em>. The time complexity of this algorithm is __.</p><blockquote><p>O(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msqrt><mi>N</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.1133em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9267em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathnormal" style="margin-right:0.10903em;">N</span></span></span><span style="top:-2.8867em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg xmlns="http://www.w3.org/2000/svg" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221l0 -0c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47zM834 80h400000v40h-400000z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1133em;"><span></span></span></span></span></span></span></span></span>)</p></blockquote><p>The Fibonacci number sequence {<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">F_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>} is defined as: <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">F_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>=0, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">F_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>=1, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">F_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">F_{N−1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>+<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mrow><mi>N</mi><mo>−</mo><mn>2</mn></mrow></msub></mrow><annotation encoding="application/x-tex">F_{N−2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span>, N=2, 3, … The space complexity of the function which calculates <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>F</mi><mi>N</mi></msub></mrow><annotation encoding="application/x-tex">F_N</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3283em;"><span style="top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.10903em;">N</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>recursively is:</p><blockquote><p>O(N)</p></blockquote><h2 id="编程题：">编程题：</h2><p><strong>7-1 Balloon Popping</strong></p><p><img src="https://images.ptausercontent.com/6b53b1a2-7325-4de6-8dd5-bc403552b751.jpg" srcset="/img/loading.gif" lazyload alt="pqq.jpg">Balloon popping is a fun game for kids. Now <em>n</em> balloons are positioned in a line. The goal of the game is very simple: to pop as many balloons as possible. Here we add a special rule to this game – that is, you can only make ONE jump. Assume that a smart baby covers his/her body by thorns（刺）, jumps to some position and lies down (as shown by the figures below), so that the balloons will be popped as soon as they are touched by any part of the baby’s body. Now it is your job to tell the baby at which position he/she must jump to pop the most number of balloons.</p><p><img src="https://images.ptausercontent.com/8ac137cc-1253-42d6-ba2f-3da93df331bc.jpg" srcset="/img/loading.gif" lazyload alt="f1.jpg"></p><p><img src="https://images.ptausercontent.com/7a0b9adf-ee5a-45ed-81e3-4ad970784ff2.jpg" srcset="/img/loading.gif" lazyload alt="f2.jpg"></p><h3 id="Input-Specification">Input Specification:</h3><p>Each input file contains one test case. For each case, two positive integers are given in the first line: <em>n</em> (≤105), the number of balloons in a line, and <em>h</em> (≤103), the height of the baby with his/her arms stretched up. Then <em>n</em> integers are given in the next line, each corresponds to the coordinate of a balloon on the axis of the line. It is guaranteed that the coordinates are given in ascending order, and are all in the range [−106,106].</p><h3 id="Output-Specification">Output Specification:</h3><p>Output in a line the coordinate at which the baby shall jump, so that if the baby jumps at this position and then lie down, the maximum number of the balloons can be popped beneath his/her body. Then also print the maximum number of balloons that can be popped. If the coordinate is not unique, output the smallest one.</p><p>The numbers must be separated by 1 space, and there must be no extra space at the beginning or the end of the line.</p><h3 id="Sample-Input">Sample Input:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-in" data-language="in"><code class="language-in">11 120-120 -40 0 80 122 140 160 220 240 260 300<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="Sample-Output">Sample Output:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-out" data-language="out"><code class="language-out">120 5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="My-answer：">My answer：</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> h<span class="token punctuation">;</span>    <span class="token keyword">int</span> max_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> tag<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> i<span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>h<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token operator">>=</span>max_num<span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                max_num <span class="token operator">=</span> i<span class="token operator">-</span>j<span class="token punctuation">;</span>                tag <span class="token operator">=</span> i<span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token operator">-</span>h<span class="token punctuation">,</span>max_num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>即从最远端往回找即可</p><h1>Day 2</h1><h2 id="判断题">判断题</h2><p>[×] For a sequentially stored linear list of length <em>N</em>, the time complexities for deleting the first element and inserting the last element are <em>O</em>(1) and <em>O</em>(<em>N</em>), respectively.</p><p>因为删除第一个节点后，前面的序列要往前移位，所以复杂度还是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p><p>[×] If a linear list is represented by a linked list, the addresses of the elements in the memory must be consecutive.</p><p>链表元素的地址显然不一定连续了</p><h2 id="选择题">选择题</h2><p>If the most commonly used operations are to visit a random position and to insert and delete the last element in a linear list, then which of the following data structures is the most efficient?</p><blockquote><p>sequential list</p></blockquote><p>因为插入与删除元素都是针对最后一个元素，所以很容易得知，就用普通的sequential list就好了</p><p>To delete <code>p</code> from a doubly linked list, we must do:</p><blockquote><p>p-&gt;prior-&gt;next=p-&gt;next; p-&gt;next-&gt;prior=p-&gt;prior;</p></blockquote><p>画图即可</p><p>To merge two singly linked ascending lists, both with <em>N</em> nodes, into one singly linked ascending list, the minimum possible number of comparisons is:</p><blockquote><p>N</p></blockquote><p>就是最坏情况T1的每一个数字都比T2小，每一个都得比较，所以是<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><mi>N</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(N)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mclose">)</span></span></span></span></p><h2 id="编程题">编程题</h2><p><strong>Add Two Polynomials</strong></p><p>Write a function to add two polynomials. Do not destroy the input. Use a linked list implementation with a dummy head node.<br>Note: The zero polynomial is represented by an empty list with only the dummy head node.</p><h3 id="Format-of-functions">Format of functions:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">Polynomial Add( Polynomial a, Polynomial b );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>where <code>Polynomial</code> is defined as the following:</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct Node *PtrToNode;struct Node &#123;    int Coefficient;    int Exponent;    PtrToNode Next;&#125;;typedef PtrToNode Polynomial;&#x2F;* Nodes are sorted in decreasing order of exponents.*&#x2F;  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>The function <code>Add</code> is supposed to return a polynomial which is the sum of <code>a</code> and <code>b</code>.</p><h3 id="Sample-program-of-judge">Sample program of judge:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef struct Node *PtrToNode;struct Node  &#123;    int Coefficient;    int Exponent;    PtrToNode Next;&#125;;typedef PtrToNode Polynomial;Polynomial Read(); &#x2F;* details omitted *&#x2F;void Print( Polynomial p ); &#x2F;* details omitted *&#x2F;Polynomial Add( Polynomial a, Polynomial b );int main()&#123;    Polynomial a, b, s;    a &#x3D; Read();    b &#x3D; Read();    s &#x3D; Add(a, b);    Print(s);    return 0;&#125;&#x2F;* Your function will be put here *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Sample-Input-2">Sample Input:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-in" data-language="in"><code class="language-in">43 4 -5 2 6 1 -2 035 20 -7 4 3 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Sample-Output-2">Sample Output:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-out" data-language="out"><code class="language-out">5 20 -4 4 -5 2 9 1 -2 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="My-answer">My answer</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">Polynomial <span class="token function">Add</span><span class="token punctuation">(</span>Polynomial a<span class="token punctuation">,</span> Polynomial b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    PtrToNode x <span class="token operator">=</span> a<span class="token operator">-></span>Next<span class="token punctuation">;</span>    PtrToNode y <span class="token operator">=</span> b<span class="token operator">-></span>Next<span class="token punctuation">;</span>    Polynomial s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token operator">-></span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      PtrToNode z <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">-></span>Exponent <span class="token operator">==</span> y<span class="token operator">-></span>Exponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> newCoefficient <span class="token operator">=</span> x<span class="token operator">-></span>Coefficient <span class="token operator">+</span> y<span class="token operator">-></span>Coefficient<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newCoefficient <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                PtrToNode p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                p<span class="token operator">-></span>Coefficient <span class="token operator">=</span> newCoefficient<span class="token punctuation">;</span>                p<span class="token operator">-></span>Exponent <span class="token operator">=</span> x<span class="token operator">-></span>Exponent<span class="token punctuation">;</span>                p<span class="token operator">-></span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>                z<span class="token operator">-></span>Next <span class="token operator">=</span> p<span class="token punctuation">;</span>                z <span class="token operator">=</span> p<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            x <span class="token operator">=</span> x<span class="token operator">-></span>Next<span class="token punctuation">;</span>            y <span class="token operator">=</span> y<span class="token operator">-></span>Next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">-></span>Exponent <span class="token operator">></span> y<span class="token operator">-></span>Exponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            PtrToNode p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span>Coefficient <span class="token operator">=</span> x<span class="token operator">-></span>Coefficient<span class="token punctuation">;</span>            p<span class="token operator">-></span>Exponent <span class="token operator">=</span> x<span class="token operator">-></span>Exponent<span class="token punctuation">;</span>            p<span class="token operator">-></span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            z<span class="token operator">-></span>Next <span class="token operator">=</span> p<span class="token punctuation">;</span>            z <span class="token operator">=</span> p<span class="token punctuation">;</span>            x <span class="token operator">=</span> x<span class="token operator">-></span>Next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            PtrToNode p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p<span class="token operator">-></span>Coefficient <span class="token operator">=</span> y<span class="token operator">-></span>Coefficient<span class="token punctuation">;</span>            p<span class="token operator">-></span>Exponent <span class="token operator">=</span> y<span class="token operator">-></span>Exponent<span class="token punctuation">;</span>            p<span class="token operator">-></span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            z<span class="token operator">-></span>Next <span class="token operator">=</span> p<span class="token punctuation">;</span>            z <span class="token operator">=</span> p<span class="token punctuation">;</span>            y <span class="token operator">=</span> y<span class="token operator">-></span>Next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        PtrToNode p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>Coefficient <span class="token operator">=</span> x<span class="token operator">-></span>Coefficient<span class="token punctuation">;</span>        p<span class="token operator">-></span>Exponent <span class="token operator">=</span> x<span class="token operator">-></span>Exponent<span class="token punctuation">;</span>        p<span class="token operator">-></span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        z<span class="token operator">-></span>Next <span class="token operator">=</span> p<span class="token punctuation">;</span>        z <span class="token operator">=</span> p<span class="token punctuation">;</span>        x <span class="token operator">=</span> x<span class="token operator">-></span>Next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>y <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        PtrToNode p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token operator">-></span>Coefficient <span class="token operator">=</span> y<span class="token operator">-></span>Coefficient<span class="token punctuation">;</span>        p<span class="token operator">-></span>Exponent <span class="token operator">=</span> y<span class="token operator">-></span>Exponent<span class="token punctuation">;</span>        p<span class="token operator">-></span>Next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        z<span class="token operator">-></span>Next <span class="token operator">=</span> p<span class="token punctuation">;</span>        z <span class="token operator">=</span> p<span class="token punctuation">;</span>        y <span class="token operator">=</span> y<span class="token operator">-></span>Next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>6-2 Reverse Linked List</strong></p><p>Write a nonrecursive procedure to reverse a singly linked list in <em>O</em>(<em>N</em>) time using constant extra space.</p><h3 id="Format-of-functions-2">Format of functions:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">List Reverse( List L );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>where <code>List</code> is defined as the following:</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct Node *PtrToNode;typedef PtrToNode List;typedef PtrToNode Position;struct Node &#123;    ElementType Element;    Position Next;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>The function <code>Reverse</code> is supposed to return the reverse linked list of <code>L</code>, with a dummy header.</p><h3 id="Sample-program-of-judge-2">Sample program of judge:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef int ElementType;typedef struct Node *PtrToNode;typedef PtrToNode List;typedef PtrToNode Position;struct Node &#123;    ElementType Element;    Position Next;&#125;;List Read(); &#x2F;* details omitted *&#x2F;void Print( List L ); &#x2F;* details omitted *&#x2F;List Reverse( List L );int main()&#123;    List L1, L2;    L1 &#x3D; Read();    L2 &#x3D; Reverse(L1);    Print(L1);    Print(L2);    return 0;&#125;&#x2F;* Your function will be put here *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Sample-Input-3">Sample Input:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-in" data-language="in"><code class="language-in">51 3 4 5 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="Sample-Output-3">Sample Output:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-out" data-language="out"><code class="language-out">2 5 4 3 12 5 4 3 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h3 id="My-answer-2">My answer</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">List <span class="token function">Reverse</span><span class="token punctuation">(</span>List L<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Position prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     Position current <span class="token operator">=</span> L<span class="token operator">-></span>Next<span class="token punctuation">;</span>    Position next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>current <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        next <span class="token operator">=</span> current<span class="token operator">-></span>Next<span class="token punctuation">;</span>         current<span class="token operator">-></span>Next <span class="token operator">=</span> prev<span class="token punctuation">;</span>         prev <span class="token operator">=</span> current<span class="token punctuation">;</span>         current <span class="token operator">=</span> next<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    L<span class="token operator">-></span>Next <span class="token operator">=</span> prev<span class="token punctuation">;</span>    <span class="token keyword">return</span> L<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1>Day 3</h1><h2 id="单选题">单选题</h2><p>Push 5 characters <code>ooops</code> onto a stack. In how many different ways that we can pop these characters and still obtain <code>ooops</code>?</p><blockquote><p>5</p></blockquote><p>画图即可</p><p>Represent a queue by a singly linked list. Given the current status of the linked list as <code>1-&gt;2-&gt;3</code> where <code>x-&gt;y</code> means <code>y</code> is linked after <code>x</code>. Now if <code>4</code> is enqueued and then a dequeue is done, the resulting status must be:</p><blockquote><p>2-&gt;3-&gt;4</p></blockquote><p>进队和出队是两头</p><p>Suppose that an array of size 6 is used to store a circular queue, and the values of <code>front</code> and <code>rear</code> are 0 and 4, respectively. Now after 2 dequeues and 2 enqueues, what will the values of <code>front</code> and <code>rear</code> be?</p><blockquote><p>2 and 0</p></blockquote><p>画图即可</p><p>Suppose that all the integer operands are stored in the stack <em>S</em>1, and all the operators in the other stack <em>S</em>2. The function <code>F()</code> does the following operations sequentially:</p><ul><li>(1) Pop two operands <code>a</code> and <code>b</code> from <em>S</em>1;</li><li>(2) Pop one operator <code>op</code> from <em>S</em>2;</li><li>(3) Calculate <code>b op a</code>; and</li><li>(4) Push the result back to <em>S</em>1.</li></ul><p>Now given { 5, 8, 3, 2 } in <em>S</em>1 (where 2 is at the top), and { <code>*</code>, <code>-</code>, <code>+</code> } in <em>S</em>2 (where <code>+</code> is at the top). What is remained at the top of <em>S</em>1 after <code>F()</code> is executed 3 times?</p><blockquote><p>15</p></blockquote><p>画图即可</p><h2 id="编程题-2">编程题</h2><p>Given a stack which can keep <em>M</em> numbers at most. Push <em>N</em> numbers in the order of 1, 2, 3, …, <em>N</em> and pop randomly. You are supposed to tell if a given sequence of numbers is a possible pop sequence of the stack. For example, if <em>M</em> is 5 and <em>N</em> is 7, we can obtain 1, 2, 3, 4, 5, 6, 7 from the stack, but not 3, 2, 1, 7, 5, 6, 4.</p><h3 id="Input-Specification-2">Input Specification:</h3><p>Each input file contains one test case. For each case, the first line contains 3 numbers (all no more than 1000): <em>M</em> (the maximum capacity of the stack), <em>N</em> (the length of push sequence), and <em>K</em> (the number of pop sequences to be checked). Then <em>K</em> lines follow, each contains a pop sequence of <em>N</em> numbers. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification-2">Output Specification:</h3><p>For each pop sequence, print in one line “YES” if it is indeed a possible pop sequence of the stack, or “NO” if not.</p><h3 id="Sample-Input-4">Sample Input:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-in" data-language="in"><code class="language-in">5 7 51 2 3 4 5 6 73 2 1 7 5 6 47 6 5 4 3 2 15 6 4 3 7 2 11 7 6 5 4 3 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Sample-Output-4">Sample Output:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-out" data-language="out"><code class="language-out">YESNONOYESNO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="My-answer-3">My answer</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>elements<span class="token punctuation">;</span>    <span class="token keyword">int</span> topIndex<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxCapacity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Stack<span class="token punctuation">;</span>Stack<span class="token operator">*</span> <span class="token function">CreateStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Stack <span class="token operator">*</span>stack <span class="token operator">=</span> <span class="token punctuation">(</span>Stack<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token operator">-></span>elements <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token operator">-></span>topIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     stack<span class="token operator">-></span>maxCapacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">return</span> stack<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">IsStackFull</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> stack<span class="token operator">-></span>topIndex <span class="token operator">==</span> stack<span class="token operator">-></span>maxCapacity <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">IsStackEmpty</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> stack<span class="token operator">-></span>topIndex <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">PushElement</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>stack<span class="token punctuation">,</span> <span class="token keyword">int</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsStackFull</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token operator">-></span>elements<span class="token punctuation">[</span><span class="token operator">++</span>stack<span class="token operator">-></span>topIndex<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">PopElement</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsStackEmpty</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token operator">--</span>stack<span class="token operator">-></span>topIndex<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">GetTopElement</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">IsStackEmpty</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stack<span class="token operator">-></span>elements<span class="token punctuation">[</span>stack<span class="token operator">-></span>topIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">VerifySequence</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>stack<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>sequence<span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> nextNumberToPush <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">IsStackEmpty</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">GetTopElement</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">!=</span> sequence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">IsStackFull</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token function">PushElement</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> nextNumberToPush<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">PopElement</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> stackCapacity<span class="token punctuation">,</span> sequenceLength<span class="token punctuation">,</span> numberOfSequences<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>stackCapacity<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sequenceLength<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numberOfSequences<span class="token punctuation">)</span><span class="token punctuation">;</span>    Stack <span class="token operator">*</span>stack <span class="token operator">=</span> <span class="token function">CreateStack</span><span class="token punctuation">(</span>stackCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>popSequence <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> sequenceLength<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numberOfSequences<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token operator">-></span>topIndex <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// Reset the stack</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sequenceLength<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>popSequence<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> <span class="token function">VerifySequence</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> popSequence<span class="token punctuation">,</span> sequenceLength<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"YES"</span> <span class="token operator">:</span> <span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token operator">-></span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>popSequence<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1>Day 4</h1><h2 id="编程题-3">编程题</h2><p>Two trees, <code>T1</code> and <code>T2</code>, are <strong>isomorphic</strong> if <code>T1</code> can be transformed into <code>T2</code> by swapping left and right children of (some of the) nodes in <code>T1</code>. For instance, the two trees in Figure 1 are isomorphic because they are the same if the children of A, B, and G, but not the other nodes, are swapped. Give a polynomial time algorithm to decide if two trees are isomorphic.</p><p><img src="https://images.ptausercontent.com/37" srcset="/img/loading.gif" lazyload alt="img"><br>Figure 1</p><h3 id="Format-of-functions-3">Format of functions:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int Isomorphic( Tree T1, Tree T2 );<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>where <code>Tree</code> is defined as the following:</p><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct TreeNode *Tree;struct TreeNode &#123;    ElementType Element;    Tree  Left;    Tree  Right;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>The function is supposed to return 1 if <code>T1</code> and <code>T2</code> are indeed isomorphic, or 0 if not.</p><h3 id="Sample-program-of-judge-3">Sample program of judge:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;typedef char ElementType;typedef struct TreeNode *Tree;struct TreeNode &#123;    ElementType Element;    Tree  Left;    Tree  Right;&#125;;Tree BuildTree(); &#x2F;* details omitted *&#x2F;int Isomorphic( Tree T1, Tree T2 );int main()&#123;    Tree T1, T2;    T1 &#x3D; BuildTree();    T2 &#x3D; BuildTree();    printf(“%d\n”, Isomorphic(T1, T2));    return 0;&#125;&#x2F;* Your function will be put here *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Sample-Output-1-for-the-trees-shown-in-Figure-1">Sample Output 1 (for the trees shown in Figure 1):</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="Sample-Output-2-for-the-trees-shown-in-Figure-2">Sample Output 2 (for the trees shown in Figure 2):</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p><img src="https://images.ptausercontent.com/38" srcset="/img/loading.gif" lazyload alt="img"></p><h3 id="My-answer-4">My answer</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span><span class="token keyword">int</span> <span class="token function">Isomorphic</span><span class="token punctuation">(</span>Tree T1<span class="token punctuation">,</span> Tree T2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> T2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>T1 <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> T2 <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>T1 <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> T2 <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>T1<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>T2<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>T1<span class="token operator">-></span>Element<span class="token operator">!=</span>T2<span class="token operator">-></span>Element<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">Isomorphic</span><span class="token punctuation">(</span>T1<span class="token operator">-></span>Left<span class="token punctuation">,</span> T2<span class="token operator">-></span>Left<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Isomorphic</span><span class="token punctuation">(</span>T1<span class="token operator">-></span>Right<span class="token punctuation">,</span> T2<span class="token operator">-></span>Right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">Isomorphic</span><span class="token punctuation">(</span>T1<span class="token operator">-></span>Left<span class="token punctuation">,</span> T2<span class="token operator">-></span>Right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Isomorphic</span><span class="token punctuation">(</span>T1<span class="token operator">-></span>Right<span class="token punctuation">,</span> T2<span class="token operator">-></span>Left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token operator">||</span>b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><strong>7-1 ZigZagging on a Tree</strong></p><p>Suppose that all the keys in a binary tree are distinct positive integers. A unique binary tree can be determined by a given pair of postorder and inorder traversal sequences. And it is a simple standard routine to print the numbers in level-order. However, if you think the problem is too simple, then you are too naive. This time you are supposed to print the numbers in “zigzagging order” – that is, starting from the root, print the numbers level-by-level, alternating between left to right and right to left. For example, for the following tree you must output: 1 11 5 8 17 12 20 15.</p><p><img src="https://images.ptausercontent.com/337cbfb0-a7b2-4500-9664-318e9ffc870e.jpg" srcset="/img/loading.gif" lazyload alt="zigzag.jpg"></p><h3 id="Input-Specification-3">Input Specification:</h3><p>Each input file contains one test case. For each case, the first line gives a positive integer N (≤30), the total number of nodes in the binary tree. The second line gives the inorder sequence and the third line gives the postorder sequence. All the numbers in a line are separated by a space.</p><h3 id="Output-Specification-3">Output Specification:</h3><p>For each test case, print the zigzagging sequence of the tree in a line. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.</p><h3 id="Sample-Input-5">Sample Input:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-in" data-language="in"><code class="language-in">812 11 20 17 1 15 8 512 20 17 11 15 8 5 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="Sample-Output-5">Sample Output:</h3><figure><div class="code-wrapper"><pre class="line-numbers language-out" data-language="out"><code class="language-out">1 11 5 8 17 12 20 15<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="My-answer-5">My answer</h3><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> v<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>l<span class="token punctuation">,</span> <span class="token operator">*</span>r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> T<span class="token punctuation">;</span>T<span class="token operator">*</span> <span class="token function">cN</span><span class="token punctuation">(</span><span class="token keyword">int</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    T<span class="token operator">*</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> n<span class="token operator">-></span>v <span class="token operator">=</span> v<span class="token punctuation">;</span> n<span class="token operator">-></span>l <span class="token operator">=</span> n<span class="token operator">-></span>r <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>T<span class="token operator">*</span> <span class="token function">bT</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> in<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> post<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> e<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> pi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">></span> e<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> T<span class="token operator">*</span> n <span class="token operator">=</span> <span class="token function">cN</span><span class="token punctuation">(</span>post<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>pi<span class="token punctuation">)</span><span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> e<span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span> <span class="token keyword">int</span> iIdx<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>iIdx <span class="token operator">=</span> s<span class="token punctuation">;</span> iIdx <span class="token operator">&lt;=</span> e<span class="token punctuation">;</span> iIdx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>in<span class="token punctuation">[</span>iIdx<span class="token punctuation">]</span> <span class="token operator">==</span> n<span class="token operator">-></span>v<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    n<span class="token operator">-></span>r <span class="token operator">=</span> <span class="token function">bT</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> post<span class="token punctuation">,</span> iIdx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> pi<span class="token punctuation">)</span><span class="token punctuation">;</span> n<span class="token operator">-></span>l <span class="token operator">=</span> <span class="token function">bT</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> post<span class="token punctuation">,</span> s<span class="token punctuation">,</span> iIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> pi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">pZ</span><span class="token punctuation">(</span>T<span class="token operator">*</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> tN<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token keyword">int</span> lR <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ns <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    T<span class="token operator">*</span><span class="token operator">*</span> cL <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>tN <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token operator">*</span>nL <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>tN <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>T<span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cL<span class="token punctuation">[</span>cs<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cs <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        T<span class="token operator">*</span> n <span class="token operator">=</span> cL<span class="token punctuation">[</span><span class="token operator">--</span>cs<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> n<span class="token operator">-></span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %d"</span><span class="token punctuation">,</span> n<span class="token operator">-></span>v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>l<span class="token punctuation">)</span> nL<span class="token punctuation">[</span>ns<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token operator">-></span>l<span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>r<span class="token punctuation">)</span> nL<span class="token punctuation">[</span>ns<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token operator">-></span>r<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>r<span class="token punctuation">)</span> nL<span class="token punctuation">[</span>ns<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token operator">-></span>r<span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">-></span>l<span class="token punctuation">)</span> nL<span class="token punctuation">[</span>ns<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token operator">-></span>l<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cs <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> lR <span class="token operator">=</span> <span class="token operator">!</span>lR<span class="token punctuation">;</span> T<span class="token operator">*</span><span class="token operator">*</span> t <span class="token operator">=</span> cL<span class="token punctuation">;</span> cL <span class="token operator">=</span> nL<span class="token punctuation">;</span> nL <span class="token operator">=</span> t<span class="token punctuation">;</span> cs <span class="token operator">=</span> ns<span class="token punctuation">;</span> ns <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>cL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>nL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tN<span class="token punctuation">;</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tN<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span><span class="token operator">*</span> in <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>tN <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>post <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>tN <span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>in<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tN<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>post<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pi <span class="token operator">=</span> tN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> T<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token function">bT</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> post<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> tN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">pZ</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> tN<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">free</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C语言环境搭建</title>
    <link href="/2024/03/05/C-0/"/>
    <url>/2024/03/05/C-0/</url>
    
    <content type="html"><![CDATA[<p>c语言环境搭建时出现的问题</p><span id="more"></span><h1>C语言环境搭建</h1><p><strong>由于CSDN上出现较多的复制粘贴怪，导致在较新的VScode版本下，有些设置的名称明明已经更换，但是还是按照老版本的在复制粘贴所谓的“回答”，更有将不同人的答案拼接在一起的复制融合怪。今天就来解决这个问题。</strong></p><p>在此将json文件详细注释，便于调整个人的参数</p><h2 id="1-报错为launch-program-workspaceRoot-EXEslbinary-conversion-exe’-does-not-exist">1 报错为launch: program &quot;{workspaceRoot}EXEslbinary conversion.exe’ does not exist</h2><p><strong>大致出现的问题就是launch.json输出的是.out文件，而task.json运行的是.exe文件，那确实是不存在这个文件的，所以会报错</strong></p><p>在进行初始化时，task.json我们可以直接让他自动生成：</p><p><strong>首先，在”Terminal“菜单下点击”Configure Tasks…”子菜单。在随后出现的弹出框中选择“C/C++:gcc.exe生成活动文件”</strong></p><p>若随后的弹出框中没有<strong>C/C++:gcc.exe生成活动文件</strong>，则检查你的mingW64是不是在配置环境变量时没加<strong>末尾的slash</strong></p><p>like：D:\VScode\mingw64\bin（×），</p><p>​          D:\VScode\mingw64\bin\（√）</p><p><strong>然后再按下<code>F5</code>就可以以同样的方法自动配置launch.json</strong>，为了避免每次调试都要选择”Debugger”，我们再“Run”-&gt;“Add Configuration…”</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">//launch.json</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 使用 IntelliSense 了解相关属性。 </span>    <span class="token comment">// 悬停以查看现有属性的描述。</span>    <span class="token comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"MyLaunch"</span><span class="token punctuation">,</span>              <span class="token comment">//  强制：就一个名字而已，但是是必须要有的（取任意自己喜欢的名字即可）</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>                    <span class="token comment">//  强制：调试器的类型，Node debugger for  node, php for PHP , go for GO (C语言就固定是cppdbg)           </span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>                 <span class="token comment">//  强制：launch/attach</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;/$&#123;fileBasenameNoExtension&#125;.exe"</span><span class="token punctuation">,</span> <span class="token comment">// 可执行文件的路径 （根据实际情况调整需与tasks.json中的-o输出文件一致）</span>            <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"D:\\VScode\\mingw64\\bin\\gdb.exe"</span><span class="token punctuation">,</span>    <span class="token comment">//  强制：调试器的位置（特别注意：根据实际情况调整，且代表的是gdb.exe调试器程序的位置而不是编译器gcc.exe的位置。）</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"C/C++: gcc.exe 生成活动文件"</span><span class="token punctuation">,</span>             <span class="token comment">//  调试前编译任务名称</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                          <span class="token comment">//  调试参数</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>         <span class="token comment">//  当前工作目录</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                   <span class="token comment">//  当前项目环境变量</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>                     <span class="token comment">//  调试器模式/类型</span>            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Enable pretty-printing for gdb"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>只要将二者协调起来就可以了</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">//task.json</span><span class="token punctuation">&#123;</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppbuild"</span><span class="token punctuation">,</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"C/C++: gcc.exe build active file"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"D:\\VScode\\mingw64\\bin\\gcc.exe"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"-fdiagnostics-color=always"</span><span class="token punctuation">,</span>                <span class="token string">"-g"</span><span class="token punctuation">,</span>                <span class="token string">"$&#123;file&#125;"</span><span class="token punctuation">,</span>                <span class="token string">"-o"</span><span class="token punctuation">,</span>                <span class="token string">"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe"</span> <span class="token comment">//就是这里</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"$gcc"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>            <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token string">"compiler: \"D:\\VScode\\mingw64\\bin\\gcc.exe\""</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppbuild"</span><span class="token punctuation">,</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"C/C++: gcc.exe 生成活动文件"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"D:\\VScode\\mingw64\\bin\\gcc.exe"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"-fdiagnostics-color=always"</span><span class="token punctuation">,</span>                <span class="token string">"-g"</span><span class="token punctuation">,</span>                <span class="token string">"$&#123;file&#125;"</span><span class="token punctuation">,</span>                <span class="token string">"-o"</span><span class="token punctuation">,</span>                <span class="token string">"$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;"</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"$gcc"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"detail"</span><span class="token operator">:</span> <span class="token string">"调试器生成的任务。"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>注意，我们的gcc编译器地址要正确</p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span></span></p>]]></content>
    
    
    <categories>
      
      <category>tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作业</title>
    <link href="/2024/02/28/homework/"/>
    <url>/2024/02/28/homework/</url>
    
    <content type="html"><![CDATA[<p>记录作业</p><span id="more"></span><h1>普通物理学</h1><p>一个quiz</p><p>一个纸质作业</p><h1>微积分</h1><p>一份作业<br>一份作业</p><h1>大脑与社会</h1><p>准备讨论课</p><h1>有机化学</h1><p>自测题</p><h1>数据结构</h1><p>PTA</p><h1>中国近代史纲要</h1><p>暂无</p><h1>普物实验</h1><p>暂无</p><h1>形势与政策</h1><p>暂无</p>]]></content>
    
    
    <categories>
      
      <category>homework</category>
      
    </categories>
    
    
    <tags>
      
      <tag>homework</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FDS_stack</title>
    <link href="/2024/02/25/FDS-stack/"/>
    <url>/2024/02/25/FDS-stack/</url>
    
    <content type="html"><![CDATA[<p>Stack</p><span id="more"></span><h2 id="PUSH">PUSH</h2><figure><div class="code-wrapper"><pre class="line-numbers language-pseudocode" data-language="pseudocode"><code class="language-pseudocode">tempCell -&gt; next &#x3D; S -&gt; nextS -&gt; next &#x3D; tempCell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="TOP">TOP</h2><figure><div class="code-wrapper"><pre class="line-numbers language-pseudocode" data-language="pseudocode"><code class="language-pseudocode">return S -&gt; next -&gt; element<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="POP">POP</h2><figure><div class="code-wrapper"><pre class="line-numbers language-pseudocode" data-language="pseudocode"><code class="language-pseudocode">temp &#x3D; SS &#x3D; S -&gt; nextfree(temp)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h1>尾递归</h1><p>编译器自动修正为循环</p>]]></content>
    
    
    <categories>
      
      <category>FDS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FDS（N）：单链表</title>
    <link href="/2024/02/24/FDS-list/"/>
    <url>/2024/02/24/FDS-list/</url>
    
    <content type="html"><![CDATA[<p>实现维护一个单链表</p><span id="more"></span><h1>单链表</h1><p>线性表：1. 有限的序列。 2. 序列中每一个元素都有唯一的前驱和后续，除了开头和结尾两个节点</p><p>链表：内存是不连续的，元素会各自被分配一块内存，内存和内存之间用指针相连</p><h1>单链表操作</h1><h2 id="增加">增加</h2><h3 id="1-头插法">1 头插法</h3><p>新建一个节点，新元素next指向head元素</p><h3 id="2-尾插法">2 尾插法</h3><p>新建一个节点，tail元素next指向新元素</p><h2 id="删除">删除</h2><p>选出待删除的节点，使其前一个节点的next指向后一个节点</p><p>删除该节点</p><p>代码实现维护一个链表：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token keyword">void</span> <span class="token function">clearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Node</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> data<span class="token punctuation">;</span>  <span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node<span class="token punctuation">;</span>Node<span class="token operator">*</span> <span class="token function">CreatList</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>Node<span class="token operator">*</span> <span class="token function">DeleteNode</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> list<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>Node<span class="token operator">*</span> <span class="token function">AddList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> list<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ShowList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">FreeList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">displayMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"========== linkedlist program ==========\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"1. Show list\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2. Add list\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"3. Remove node\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0. Exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"====================================\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Select an option: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter the lenth of the list\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    Node<span class="token operator">*</span> list<span class="token punctuation">;</span>    list <span class="token operator">=</span> <span class="token function">CreatList</span><span class="token punctuation">(</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ShowList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pos<span class="token punctuation">,</span>data<span class="token punctuation">;</span>    <span class="token keyword">int</span> choice<span class="token punctuation">;</span>      <span class="token keyword">do</span>      <span class="token punctuation">&#123;</span>        <span class="token function">clearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">displayMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>choice<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">clearScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token function">ShowList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>                <span class="token function">ShowList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter the position that you want to add:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter the number you want to add :\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                list <span class="token operator">=</span> <span class="token function">AddList</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">ShowList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                <span class="token function">ShowList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"please enter the position that you want to delete:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>                list <span class="token operator">=</span> <span class="token function">DeleteNode</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">ShowList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                <span class="token function">free</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Invalid option! Please choose again.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>choice<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Node<span class="token operator">*</span> <span class="token function">CreatList</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  Node <span class="token operator">*</span>head<span class="token punctuation">;</span>  head <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fail to apply the Memory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    Node <span class="token operator">*</span>l<span class="token punctuation">;</span>    l <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>l<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    l<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> l<span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">ShowList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the list now is:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Node<span class="token operator">*</span> p<span class="token punctuation">;</span>  p <span class="token operator">=</span> list<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"lenth = %d"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">FreeList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      Node<span class="token operator">*</span> temp<span class="token punctuation">;</span>      temp <span class="token operator">=</span> list<span class="token punctuation">;</span>      list <span class="token operator">=</span> list<span class="token operator">-></span>next<span class="token punctuation">;</span>      <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Node<span class="token operator">*</span> <span class="token function">AddList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> list<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    Node<span class="token operator">*</span> t<span class="token punctuation">;</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    t<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    list<span class="token operator">-></span>next <span class="token operator">=</span> t<span class="token punctuation">;</span>    len<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">></span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"beyond the limit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"beyond the limit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  Node<span class="token operator">*</span> a<span class="token punctuation">;</span>  a <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token operator">-></span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>  Node <span class="token operator">*</span>p<span class="token punctuation">;</span>  p <span class="token operator">=</span>list<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>  a<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>  p<span class="token operator">-></span>next <span class="token operator">=</span> a<span class="token punctuation">;</span>  len<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Node<span class="token operator">*</span> <span class="token function">DeleteNode</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> list<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"the list is empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">></span>len<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"beyond the limit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"beyond the limit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  Node <span class="token operator">*</span>p<span class="token punctuation">;</span>  p <span class="token operator">=</span> list<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>                                                                            <span class="token punctuation">&#125;</span>  Node <span class="token operator">*</span>temp<span class="token punctuation">;</span>  temp <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>  p<span class="token operator">-></span>next <span class="token operator">=</span> temp<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token function">free</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>   len<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> list<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>它还有非常美丽的GUI哦</p><h1>Abstract Data Type</h1><p>Data Type = {Objects}<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∪</mo></mrow><annotation encoding="application/x-tex">\cup</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.5556em;"></span><span class="mord">∪</span></span></span></span>{operations }</p><p>学生选课：十字链表（稀疏矩阵）</p><h1>Cursor implementation of linked lists（no pointed）</h1>]]></content>
    
    
    <categories>
      
      <category>FDS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Hexo新建一个文本文件的方法</title>
    <link href="/2024/01/24/hello-world/"/>
    <url>/2024/01/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>介绍基本的hexo新建文件方法</p><span id="more"></span><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="Run-server">Run server</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="Generate-static-files">Generate static files</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h3 id="Abbreviation">Abbreviation</h3><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo s $ hexo g$ hexo d <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="If-you-wanna-delete-a-markdown-page">If you wanna delete a markdown page</h3><p>Please remember to delete the folder📂**.deploy_git**，then run the code below</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文件操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实验室复盘参考</title>
    <link href="/2024/01/24/%E5%A4%8D%E7%9B%98%E5%8F%82%E8%80%83/"/>
    <url>/2024/01/24/%E5%A4%8D%E7%9B%98%E5%8F%82%E8%80%83/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f8d0175bc6383503ee3b049d5258767d1acfff75cd3709ad18fbba0b879c9a02">b867493abe2a7819f04f38935eda37bf41bffb341668120a1662e98720e5a01e603c3238fc6593ba5945434e848be6ce33f71bf74b29865957640dc95774104eb8d9120dfa29b672d04048b8b58d0e29850fa298b8396ea200a271d4209692400c36fb90108681efae4d4d537771656c8531276f8e511e46a01377f06bb180c916752efbe7ed0cef74e3fc14785073320f571c0f83da8c3b2e53e59d223356c1ae36e821c99132d8766916fc3dffef1940369e3391c0af288c37d02bb2e4fc281d1c16cc532ffa97180f5edad3e7f0cbf1cd14e401228e5344a987227cf90d205fa9be2b7425b2ef3a11b4a68721a67e38cfbbb71b9c93677800102fa27bd17aca70e5224f90f80e8011e70440b4573cf2da837910d62dac9fef6d45302a33e03e95508ef0b522348cdf0a1cd0d0dea7c4b0569589f212d6dc19d56f6f70c27bf44eda36e27f9827138d28bed0d45845edcf50d5aa4563ef7b33b141a1c9519474550243e14f123d22f168c9834036ba0bb35a27f6cd92f66747d6762fcdf9ebe6e1355f197bd6c3e9616ad1fd8b14cf</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">The surname of the laboratory mentor</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>实验室</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实验室</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的近况</title>
    <link href="/2024/01/23/me/"/>
    <url>/2024/01/23/me/</url>
    
    <content type="html"><![CDATA[<p>我最近在做的事情</p><span id="more"></span><p><strong>我感到这个学期是一个非常好的能改变我外语认知的学期，要利用好这个学期</strong></p><p>目前在做的研究方向为：</p><ol><li>果蝇幼虫在水环境下的运动模式决策</li><li>睡眠脑电分析</li></ol><p>我目前的困境：</p><ol><li>数据分析能力不足</li><li>行为学量化能力不足</li></ol><p>其他：</p><ol><li>搭建求生班级网站</li><li>学习FDS</li></ol><p>决定先学FDS吧，可能会相对好接受一点<br>发现一个很好的计算神经学习网站：<br><a href="https://compneuro.neuromatch.io/tutorials/intro.html">啦啦</a></p><p>[python draw](<a href="https://www.zhihu.com/tardis/bd/art/139052035?source_id=1001">matplotlib.pyplot的使用总结大全（入门加进阶） (zhihu.com)</a>)</p>]]></content>
    
    
    
    <tags>
      
      <tag>我的近况</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存一下Fluid的用户手册</title>
    <link href="/2024/01/23/doc/"/>
    <url>/2024/01/23/doc/</url>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.fluid-dev.com/docs/">用户手册</a></p><p class="katex-block "><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>F</mi><mi>l</mi><mi>u</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Fluid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">Fl</span><span class="mord mathnormal">u</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span></span></p>]]></content>
    
    
    
    <tags>
      
      <tag>fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1/23良渚实验室参观+组会</title>
    <link href="/2024/01/23/lab/"/>
    <url>/2024/01/23/lab/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9a1da373aabbf7ad13ed60fdbc6e7d1cda264cf40722715a85fb6ed1903a7b6d">b3dd0969718da80d4f3a264278f78a4771a14a444be3f057b4b3b7b8493eab468c86428c747239a38c3d2ee462a48ca1a6df26e89f6fae603eba5f4d889726c15ed0018f0cd77ef3a7034535f174a30b7799373ebbc1ed5b1739ac0360a84b87535f72ac64c3abd5b81a90a1ec86b830ed8a42e01cd5c815de5f316b63af1288ca2a0eff7c601748005dc5dc536983d8942e5c3879b1daa6f1f61352c86e84014d5f7cb039cbe157ca1f984a0af047799bf277816a344f57a1a43cdf927c7a010f9bc87743cf3eb4019bcae68ecb31369f1ce1c992c765eabe69fa88951fce5e117013788ee47f86260fd86d1d7c8ce5680a2e6bfc3af37924de9e6d8dd1a50f0518077b847bbd4ed05ebb499c06676567f75e3af2b4ffe8e5685c7b36958a9ce672ccfa5b9aaf3d9a73cc96af33602ddf05dcd0568b222f7f535d36b57f108cc255dfc06f1561f686d93ccdcc6d8555dec0a426b3ce8375de087cfd33becbcbce834d8884425372696c724b161c5285099f38af26a123d607065079fb5fd53c08d52cd6b4a85886222d92394b0d3babdcc64d189975396cc64bc2c7e288e6d59053c8e21c00712d66249735ebda0e1c77c66c5073b8625d7a6417cfb3ef2886857f79a82f08086034297ba2de704a3d9a728d290f402f55293487662e82030601133160802ea3121e47cc8d6788af33740a5f11b89e5e80cd413d11bea70734912369e1119409ef913bf625e56ffdd747047ab4b15879b2c6dbb9b75d39bdd934b48a92762c01ac809f351cc7ff96bdce21cd0d70b81fe2dbd059dbb0a74625bf33f0bb47670d222eec4373065eb7f6a7bfc25ce99516c1e507b504f681c17d1fdd460aba0dead14df64c99f0726a6693ceac27aa0401433659de1bd83e15fccacc13179df1979e94eb23376196907d72e4038e35ab25ab679e7552dbd99a74230b5de1ddb7341dcc432f1e0cd15a9a6bd0c130a5b88fc036529940098af0e8dff0104ecd2562869b806d2c0f57601aa8580a67e54ed6946186546db4095d1ce7d64760df35588728008a1d8341a6af4a9b1cd1906b508425406733fb1375ae8df54a47db19e1d965a7e04fcf744b2a2f1ab8994509ebf3fe5113c7890f9991571992c7c994e44c605c063930a70b4d4be0f2cc31f961904da6f9a77e23261aa0d22cc4e42c20cf438c94cffed1f68f3de6489ef73828cb9047ea20eac90c7a80e91035ffa22ff5d49e861686c7a3fb8d62210ffa17402c0c2ecb96600d9efb04bab591d0fae2186df95c1205ba83a627b41e0a5b4f847277d89e6926680e9b8ec2aa1bdd878367b56b94c5f17a852c909bde90c20721dd9bd622437edb80462e8dec77cb5b5ccb99bc1fcf1256248ec21b319be6b1f2a7e1d331abd28269b71fc7ebda25dc32e9259655e0133d047a72a487c18da716aad1303cd4d397975f217f80d8b8f8b0878be353296ab222fff8805648be2e762025f6f87540aa3361</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">咕咕生日（yyyymmdd）</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>实验室</category>
      
    </categories>
    
    
    <tags>
      
      <tag>实验室</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C语言重修</title>
    <link href="/2024/01/20/c/"/>
    <url>/2024/01/20/c/</url>
    
    <content type="html"><![CDATA[<p>在这里补充我所不知道的C语言坑点</p><span id="more"></span><h1>C的自带函数</h1><h2 id="Scanf-函数相关">Scanf(  )函数相关</h2><p>**简介：**scanf()函数是通过终端格式化输入函数，它从标准输入设备（键盘）读取输入信息。可以读入任何固有类型的数据并自动把数值转变成适当的机内格式。<strong>其返回值是成功读取的变量个数</strong></p><ol><li>当使用&quot;%d%d%d&quot;这种输入格式时，输入可以是一个空格或者多个空格、tab键、回车键分割。输出都是正确的</li><li>“%d,%d,%d&quot;格式与”%d%d%d&quot;格式基本相同，不同之处在&quot;%d,%d,%d&quot;这种格式在输入时“，”一定要紧跟输入的数字，作为分隔符时以&quot;%d,&quot;为单位进行格式化读取，其他字符同理</li><li>字符读取时，也即&quot;%c&quot;输入，空格和转义字符均作为有效字符，例如</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">char</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c%c%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c,%c,%c\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>当你输入：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>此时a-&gt;“1”,b-&gt;&quot; &quot;,c-&gt;&quot;2&quot;其余被丢弃，还有类似的问题，比如：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d,  c=%c,\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c=%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>当你输入<code>1</code>然后直接敲回车时，他会读取<code>1</code>和<code>[\n]</code>，也即<code>c='\n'</code></p><p>解决办法：</p><ol><li>在接收第二个数之前清空缓冲区，<code>fflush(stdin);getch();getchar();</code>随便一个都可以，<code>fflush(stdin)</code>是全部清空，<code>getchar()</code>是清空一个字符，如果缓冲区还有多余的字符则会被正常使用</li><li>在%c之前加入空格，空格可以吸收回车符、空格</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//解决方法2</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">" %c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d,  c=%c,\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c=%d\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ol start="4"><li>在<code>scanf()</code>函数接收输入数据时，遇到以下问题结束一个数据的输入：</li></ol><blockquote><p>1.遇见空格，回车，跳格</p><p>2.遇见宽度</p><p>3.遇见非法输入</p></blockquote><p>解决方法：使用<code>%[]</code>(扫描字符集合)，可以用来进行多个字符串的输入，并对结束符进行自定义。对于<code>%[]</code>可以用<code>^+</code>结束标志(可以使任意字符，代表着输入这个字符就终止对字符串的读取)。</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%[^\n]"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>比如上述代码就可以顺利读取<code>hello world</code></p><ol start="5"><li>神奇的缓冲区指针：</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">;</span><span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"b=%d\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d, b=%d, str=%s\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输入<code>hello</code>时</p><p>你会得到一个这样的结果：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c">b<span class="token operator">=</span><span class="token number">999</span>helloa<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">999</span><span class="token punctuation">,</span> str<span class="token operator">=</span>hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>分析如下：</p><p>程序执行到第一个 <code>scanf()</code> 时等待用户输入，从键盘输入 <code>hello</code> ，按下回车键，<code>scanf()</code> 匹配到 <code>hello</code></p><p>不是<code>scanf()</code>想要的整数，所以不赋值给a，也不赋值给b，他们二者的值不动</p><p>匹配失败意味着不会移动内部的位置指针，此时缓冲区中的内容仍然是 <code>hello</code> 。执行到底三个 <code>scanf()</code> 时，它想要一个字符串，这不是正好捡漏吗，把 <code>hello</code> 赋值给 str 就好了。</p><ol start="6"><li>不能忽略空白符的情况：</li></ol><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"a=%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"b=%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d, b=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>输入<code>a=100</code>，程序居然直接就结束了，它与以往的程序有什么不同呢？你可以自行比较一下：</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a=%d, b=%d\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>这个程序输入<code>100</code>，它是会等你输入第二个<code>scanf()</code>的，并且会忽略之后的空格，</p><p><strong>但是，当控制字符串不是以格式控制符 %d、%c、%f 等开头时，空白符就不能忽略了，它会参与匹配过程，如果匹配失败，就意味着 scanf() 读取失败了。</strong></p><h1>Malloc（）函数</h1><p>C 库函数 <strong>void *malloc(size_t size)</strong> 分配所需的内存空间，并<strong>返回一个指向它的指针</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FDS（一）：排序算法</title>
    <link href="/2024/01/20/FDS-1/"/>
    <url>/2024/01/20/FDS-1/</url>
    
    <content type="html"><![CDATA[<p>FDS之排序算法</p><span id="more"></span><h1>前言</h1><p>以排序算法作为起始，我也不知道合不合适</p><p>排序问题有许多有趣的算法解决方案，体现了许多计算机科学的思想：</p><ol><li>比较和非比较的策略</li><li>迭代与递归实现</li><li>分治范式（例如，并归排序或快速排序）</li><li>最好/最坏/平均时间复杂度分析</li><li>随机算法</li></ol><p>本文将实现：</p><ol><li>基于比较的排序算法：<ul><li>BUB 冒泡排序</li><li>SEL 选择排序</li><li>INS 插入排序</li><li>MER 并归排序（递归实现）</li><li>QUI 快速排序 （递归实现）</li><li>R-Q 随机快速排序 （递归实现）</li></ul></li><li>不基于比较的排序算法：<ul><li>COU 计数排序</li><li>RAD 基数排序</li></ul></li></ol><p>关于算法的<strong>稳定性</strong>：我之前一直有一个误区：以为是不一定能排序成功所以叫做不稳定排序，实际上都是能排成功的。</p><p>那什么是稳定性呢？简单地说就是<strong>所有相等的数经过某种排序方法后，仍能保持它们在排序之前的相对次序，我们就说这种排序方法是稳定的。反之，就是非稳定的。</strong></p><h1>1 基于比较的排序算法</h1><p>BUB,SEL,INS 最容易实现，但不是效率最高的，他们的时间复杂度是O(N^2^)</p><h2 id="1-1-冒泡排序">1.1 冒泡排序</h2><blockquote><p>算法时间复杂度</p><p>​最坏情况：O(n^2)</p><p>​最好情况：O(n)</p><p>​平均情况：O(n^2)</p><p>算法空间复杂度：S(n)=O(1)</p><p>算法稳定性：稳定排序</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">,</span>num<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token constant">EOF</span><span class="token punctuation">)</span><span class="token comment">//这一行语句非常有意义</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//优化，因为最后一位在一轮冒泡后一定处于正确的位置</span>            <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> num<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    temp <span class="token operator">=</span> num<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    num<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    num<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="1-2-选择排序">1.2 选择排序</h2><blockquote><p>算法时间复杂度</p><p>​最坏情况：O(n^2)</p><p>​最好情况：O(1) //即不需要排序，本身已是正序</p><p>​平均情况：O(n^2)</p><p>算法空间复杂度：S(n)=O(1)</p><p>算法稳定性：不稳定排序</p></blockquote><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>           <span class="token comment">//就是从第一个开始，寻找每个[i,10]区间上的最小值，并且与i交换</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token operator">></span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                temp <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token comment">//temp用于记录其最小值的位置</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">!=</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>temp<span class="token punctuation">]</span><span class="token punctuation">;</span>            a<span class="token punctuation">[</span>temp<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="1-3-插入排序">1.3 插入排序</h2><blockquote><p>算法时间复杂度</p><p>​最坏情况：O(n^2)</p><p>​最好情况：O(n)</p><p>​平均情况：O(n^2)</p><p>算法空间复杂度：S(n)=O(1)</p><p>算法稳定性：稳定排序</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>FDS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FDS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo Deploy时常见问题解决</title>
    <link href="/2024/01/20/hexo-deploy/"/>
    <url>/2024/01/20/hexo-deploy/</url>
    
    <content type="html"><![CDATA[<p>在使用下述代码将本地文件上送到Github时，常常会出现一系列问题</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>以下是我遇到过的问题和相应的解决办法</p><span id="more"></span><h1>1 报错 GitHub does not provide shell access</h1><p>没错就是这样，虽然他是个报错，但他说的是事实，就算你用Git bash也会遇到这样的情况</p><p>当出现这个的时候，其实是没啥大问题的</p><p>这些问题常出现于刚刚新建一个文件夹作为你的blog时，由于忘记配置站点文件中的<code>deploy:</code></p><p>只要找到你的站点配置文件<code>_config.yml</code>然后翻到最底下，会看到：</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>只需要将他补充完整即可</p><figure><div class="code-wrapper"><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>  <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> <span class="token comment">#你的github.io仓库的ssh地址</span>  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>特别要注意一下有些blog会告诉你branch是master，这是以前版本的github用的树根节点，为了消除潜在的性别歧视暗示，现在是main了，再用master是没有用的，无法正确帮你部署网站</p><h1>2 忘记安装hexo-deployer-git插件</h1><p>这也是一个刚刚新建一个blog文件夹后常见的问题</p><p>只要在文件夹根目录打开git bash然后下载一下就好了</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1>3 无法连接到Github</h1><p>直接一条龙，重置一下账号密码就可以了</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"你的用户名"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"你的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>接着是生成ssh密钥，除了一句话要注意一下，其他都只要回车选默认就好了</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"你的邮箱"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>注意这里会有弹出</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Overwrite <span class="token punctuation">(</span>y/n<span class="token punctuation">)</span>? <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>一定要输入<code>y</code>而不是回车，这个好像是有区别的，也有可能是我的心理作用，因为我之前一直直接敲回车，结果一直不行</p><p>然后去你的用户路径下<code>C:\Users\你的用户名\.ssh</code>找到一个叫做<code>id_rsa.pub</code>的文件，用记事本打开，然后再复制其中的密钥</p><p>添加到你的GitHub账户即可</p><p>最后用下列命令登录连接即可</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>这时候往往会变成第一种情况，也有可能直接成功</p><p>其实总而言之，本文包含的就是在执行<code>hexo deploy</code>之前所需的一切配置工作，只要你全部都完成过一遍，是完全没有问题的，有的话大概率是说明某些步骤漏了，或进行了修改，但是没有及时同步</p>]]></content>
    
    
    <categories>
      
      <category>tutorial</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FDS（零）：预备</title>
    <link href="/2024/01/20/FDS-0/"/>
    <url>/2024/01/20/FDS-0/</url>
    
    <content type="html"><![CDATA[<p>学习FDS之前在网上查到的一些目前觉得应该会比较有用的资料与网站，以及需要的预备知识</p><span id="more"></span><h1>资料网站</h1><h2 id="可视化网站">可视化网站</h2><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">数据结构可视化 — Data Structure Visualization (usfca.edu)</a></p><h2 id="菜鸟教程">菜鸟教程</h2><p><a href="https://www.runoob.com/data-structures/data-structures-tutorial.html">数据结构与算法 | 菜鸟教程 (runoob.com)</a></p><h2 id="学习总纲">学习总纲</h2><p><a href="https://www.dotcpp.com/course/ds/">数据结构与算法分析</a></p><p>（本系列文章大部分参考于该网站）</p><h2 id="算法学习网站">算法学习网站</h2><p><a href="https://leetcode.cn/u/pikapika-ax/">PikaPika - LeetCode</a></p><h1>预备知识</h1><h2 id="理解复杂度概念">理解复杂度概念</h2><p>Predict the growth in run time as the N change</p><p><strong>1. 时间复杂度</strong></p><p><strong>时间复杂度</strong>表示一个程序运行所需要的时间，其具体需要在机器环境中才能得到详细的值，但我们一般不需要得到详细的值，只是需要比较快慢的区别即可，为此，我们需要引入时间频度（语句频度）的概念</p><p>时间频度中，n 称为问题的规模，当 n 不断变化时，时间频度 T(n) 也会不断变化，一般情况下，算法中的基本操作重复次数时问题规模的某个函数，一般用 T(n) 表示，若有某个辅助函数 f(n) 使得当 n 趋向于无穷大时，T(n)/f(n) 的极限值为不等于零的常数，则称 f(n) 是 T(n) 的同数量级函数。记作T(n)=Ｏ(f(n)) ,称 Ｏ(f(n))  为算法的渐进时间复杂度，简称时间复杂度。</p><p><strong>2. 空间复杂度</strong></p><p>一个程序的空间复杂度是指运行完一个程序所需内存的大小，其包括两个部分。</p><p>a) <strong>固定部分</strong>。这部分空间的大小与输入/输出的数据的个数多少、数值无关。主要包括指令空间（即代码空间）、数据空间（常量、简单变量）等所占的空间。这部分属于静态空间。</p><p>b) <strong>可变空间</strong>。这部分空间的主要包括动态分配的空间，以及递归栈所需的空间等。这部分的空间大小与算法有关。</p><p>对算法进行预估：</p><p><strong>函数符号：</strong></p><p><strong>〇表示最坏情况（上界），Ω表示最好情况(下界)，θ表示平均情况（等价）</strong>，我们常用的分析，<strong>使用O进行表示即可</strong>。对于一个算法的时间复杂度而言，n表示其执行问题的规模，O(n)表示执行该问题需要的时间量级，</p><p>程序串行，时间复杂度取最大的那个，程序嵌套，实践复杂度相乘</p><p>logN  grow very slowly</p><p>如O(n)表示线性级别，</p><p>O(n^2^)表示平方级别，</p><p>其中 f(n) 主要的判断方式为算法中循环结构的执行次数。</p><p><strong>预估方法：</strong></p><p>观察程序中循环的次数</p><p>例如：O（1）/ O（C），C代表常数</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//执行一次</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">//执行一次</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>例如：O（logN）</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token comment">//执行一次</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行logn次</span>        i<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">//执行一次</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>又例如：O（N*logN）</p><figure><div class="code-wrapper"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//执行一次</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//执行n次,其实判断的语句执行了n+1次</span>        <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//执行1次</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//执行log(n)次</span>            j<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">//执行一次</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>可以非常直观地得出：</p><p>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2^) &lt; O(n^3^) &lt; O(2^n^)</p><h2 id="example">example</h2><p>matrix addition</p>]]></content>
    
    
    <categories>
      
      <category>FDS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FDS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>琐记（一）</title>
    <link href="/2024/01/19/%E7%90%90%E8%AE%B0/"/>
    <url>/2024/01/19/%E7%90%90%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="密码错误" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b8b8bacc3d73efc572254cf5bdae713636419123ee17c2c9de5dfbbb7ef005ed">773b959f9eba00f1e3a8da1912e96b1508f516d7ba5e983d38e43786d4d70a315106d30b256263ffe95c73a8476839f80299a69b971059e744e445dbd9829c6462a11a8c81ddfb805aaaeb65da8f1173177a05bdc5f9fd8ac545feeff551afee989ae5b24148e8736f0c246db06d1d8504e39d9c2ecd8fc10c93f9f984146baee901399f068e47d22ccc7350b53ff29bd7509605e53ffa571c48512bc54effec</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">咬咬生日（yyyymmdd）</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>琐记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CCの寄语</title>
    <link href="/2024/01/17/cc/"/>
    <url>/2024/01/17/cc/</url>
    
    <content type="html"><![CDATA[<p>黑暗之神留言</p><span id="more"></span><p><s>CC还在想应该说什么，但是gfy已经把网页做好了</s></p><p>黑暗之神留言:<br>首先感谢楼主赠予内测VIP留言通道。</p><p>​高中时，特别不喜欢也特别不擅长信息技术。死记硬背地应付完学考，长舒一口气，以为再也不用面对自己厌恶的学科了。直到这个学期，一门大计基一门工图告诉我梦该碎了。</p><p>​但是，其实一切都没有那么糟。虽然这两门的成绩在浙里普普通通，但是相比于曾经那个上课在书上画画、下课抄同桌代码的我来说，已经是很了不起的进步。</p><p>​也许有时候我们是躲不掉一些令人讨厌的东西的。比如说，同龄人的吹捧、形式主义的大会、毫无价值的预置课，还有信息技术对于曾经的我。我们越想摆脱它们，它们就越阴魂不散。回击是比躲避更有效的方法。就像一句名言说的那样:世界以痛吻我，我反手就给它一个<strong>大嘴巴子</strong>。</p><p>​最后再次感谢本次宝贵的VIP内测机会。</p><p>From：CC</p><p>​</p>]]></content>
    
    
    <categories>
      
      <category>寄语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>cc寄语</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
